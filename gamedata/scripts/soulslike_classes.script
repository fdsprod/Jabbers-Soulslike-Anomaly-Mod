class "TimedQueue" 

function TimedQueue:__init(max_count, expiriation_ms)
    self.data = {}
    self.first = 0
    self.last = -1
    self.max_count = max_count
    self.expiriation_ms = expiriation_ms
end

function TimedQueue:Clear()
    self.data = {}
    self.first = 0
    self.last = -1
<<<<<<< HEAD
    --soulslike.debug("TimedQueue:Clear")
=======
    soulslike.debug("TimedQueue:Clear")
>>>>>>> main
end

function TimedQueue:Enqueue(value)
    value.__cached_time = time_global()
    self.last = self.last + 1
    self.data[self.last] = value
<<<<<<< HEAD
    --soulslike.debug("TimedQueue:Enqueue")
=======
    soulslike.debug("TimedQueue:Enqueue")
>>>>>>> main
end

function TimedQueue:Dequeue()
    local result
    if (self.first > self.last) then
        result = nil
    else
        result = self.data[self.first]
        self.data[self.first] = nil
        self.first = self.first + 1
    end
<<<<<<< HEAD
    --soulslike.debug("TimedQueue:Dequeue")
=======
    soulslike.debug("TimedQueue:Dequeue")
>>>>>>> main
    return result
end

function TimedQueue:Peek()
    local result
    if (self.first > self.last) then
        result = nil
    else
        result = self.data[self.first]
    end
    return result
end


function TimedQueue:Values()
<<<<<<< HEAD
    --soulslike.debug("TimedQueue:Values")
    --soulslike.debug(self.data)
    local values = {}
    for _,v in pairs(self.data) do
=======
    soulslike.debug("TimedQueue:Values")
    soulslike.debug(self.data)
    local values = {}
    for i,v in ipairs(self.data) do
>>>>>>> main
        if v then
            table.insert(values, v)
        end
    end
    return values
end

function TimedQueue:Invalidate()  
    while true do
        local next = self:Peek()
        if next == nil then 
            break
        end
        if next.__cached_time + self.expiriation_ms < time_global() then
<<<<<<< HEAD
            --soulslike.debug("TimedQueue:Dequeue_time")
=======
            soulslike.debug("TimedQueue:Dequeue_time")
>>>>>>> main
            self:Dequeue()
        else
            break;
        end
    end
end
