
local function calculate_fatal_hit_info(hits)
    local data = nil

    soulslike.debug("Calculating fatal hit:")
    soulslike.debug(hits)

    -- Find the final blow
    for _, value in ipairs(hits) do
        if value.is_fatal and value.draftsman_id then
            data = value
            break
        end
    end

    soulslike.debug("Calculate fatal hit info - Found fatal blow:")
    soulslike.debug(data)

    -- Convert to an aggregation of damage if there is a well defined killer
    if data then 
        local aggregation = {}
        for _, value in ipairs(hits) do
            local hit_data = value
            if hit_data.draftsman_id then
                local o = aggregation[hit_data.draftsman_id]
                if not o then
                    o = { 
                        type = hit_data.type,
                        power = 0,
                        draftsman_id = hit_data.draftsman_id,
                    }
                    aggregation[hit_data.draftsman_id] = o
                end
                o.power = o.power + hit_data.power
            end
        end
        soulslike.debug("Calculate fatal hit info - aggregation:")
        soulslike.debug(aggregation)
        local most_damage = nil
        for _, agg in pairs(aggregation) do
            if not most_damage or most_damage.power < agg.power then
                most_damage = agg
            end
        end
        if not most_damage then
            soulslike.debug("Calculate fatal hit info - no most damage:")
            return data
        end
        data.type = most_damage.type
        data.power = most_damage.power
        data.draftsman_id = most_damage.draftsman_id
    end

    if data and data.draftsman_id then 
        soulslike.debug("Calculate fatal hit info - Looking up draftsman "..tostring(data.draftsman_id))
        data.draftsman = level.object_by_id(data.draftsman_id)
    end

    return data
end

local function find_backpack()    
    soulslike.debug("Looking for player backpack")
    local has_backpack = false
    local function find_backpack(_, item)
        local sec = item:section()
        has_backpack = has_backpack or (item and SYS_GetParam(0, sec, "kind") == "i_backpack")
    end
    db.actor:iterate_inventory(find_backpack)
    return has_backpack
end

---------------------------------------------------------
-- Factory
---------------------------------------------------------

function create_by_id(scenario_id, state) 
    local scenario = nil

    soulslike.debug("Creating scenario "..tostring(scenario_id))

    if scenario_id == soulslike.SCENARIOS.Default then
        scenario = soulslike_scenarios.DefaultSoulslikeScenarioLogic(state) 
    end
    
    if scenario_id ==soulslike.SCENARIOS.RFDetectorStash then 
        scenario = soulslike_scenarios.RFDetectorSoulslikeScenarioLogic(state) 
    end
    
    if scenario_id ==soulslike.SCENARIOS.HiddenStash then 
        scenario = soulslike_scenarios.HiddenStashSoulslikeScenarioLogic(state) 
    end
    
    if scenario_id ==soulslike.SCENARIOS.ScatteredStashes then 
        scenario = soulslike_scenarios.ScatteredStashesSoulslikeScenarioLogic(state) 
    end
    
    if scenario_id ==soulslike.SCENARIOS.NearbyDeadStalker then 
        scenario = soulslike_scenarios.NearbyDeadStalkerSoulslikeScenarioLogic(state) 
    end
    
    if scenario_id ==soulslike.SCENARIOS.MutantAmbush then
         scenario = soulslike_scenarios.MutantAmbushSoulslikeScenarioLogic(state) 
    end
    
    if scenario_id ==soulslike.SCENARIOS.StalkerAmbush then 
        scenario = soulslike_scenarios.StalkerAmbushSoulslikeScenarioLogic(state) 
    end

    if scenario == nil then
        soulslike.debug("Unrecognized Scenario Id: "..tostring(scenario_id)) 
        scenario = soulslike_scenarios.DefaultSoulslikeScenarioLogic(state) 
    end

    return scenario
end

function create_new(hits)            
    local fatal_hit = calculate_fatal_hit_info(hits)

    if fatal_hit then    
        fatal_hit.killer_type = soulslike.entity_type.Other
        if fatal_hit.draftsman_id then
            fatal_hit.draftsman = level.object_by_id(fatal_hit.draftsman_id)
            if IsStalker(fatal_hit.draftsman) then
                fatal_hit.killer_type = soulslike.entity_type.Stalker
                soulslike.debug("Player killed by a Stalker named "..fatal_hit.draftsman:name())
            elseif IsMonster(fatal_hit.draftsman) then
                fatal_hit.killer_type = soulslike.entity_type.Monster
                soulslike.debug("Player killed by a Mutant called "..fatal_hit.draftsman:name())
            elseif IsAnomaly(fatal_hit.draftsman) then
                fatal_hit.killer_type = soulslike.entity_type.Anomaly
                soulslike.debug("Player killed by a "..fatal_hit.draftsman:name().." Anomaly")
            end
        end
    end

    if fatal_hit then 
        soulslike.debug("Player fatal hit was a "..soulslike.hit_type_to_str[fatal_hit.type])
    end

    -- If there is no draftsman found for the fatal blow
    -- The killer is likely something like radiation or some other
    -- DOT
    if fatal_hit and not fatal_hit.draftsman then 
        soulslike.debug("Player fatal hit was a "..soulslike.hit_type_to_str[fatal_hit.type])
    end

    -- We want to be able to debug each scenario using the 
    -- scenario weight to max, and in this case we want to 
    -- be able to remove the default scenario so its always
    -- chosen.

    local has_backpack = find_backpack() 
    local player_is_indoor = not level_weathers.valid_levels[level.name()]
    local rescuer = nil
    local looter = nil
    local looter_type = nil
    local scenario_loot_scalar = 1.0
    local available_scenarios = {}    
    local game_state = soulslike.get_soulslike_state()
    local spawn_position = vector():set(game_state.spawn_location.position.x, game_state.spawn_location.position.y, game_state.spawn_location.position.z)   
    local distance_from_spawn = spawn_position:distance_to_sqr(db.actor:position())
    
    if distance_from_spawn <= 50 then
        soulslike.debug("Player was killed "..tostring(distance_from_spawn).." meters their spawn point.")

        rescuer = soulslike.find_closest_friendly_stalker()
        scenario_loot_scalar = 0
      
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 1.0})  
    elseif distance_from_spawn <= 200 then
        soulslike.debug("Player was killed "..tostring(distance_from_spawn).." meters their spawn point.")

        rescuer = soulslike.find_closest_friendly_stalker()
        looter = soulslike.find_closest_enemy()
        scenario_loot_scalar = (distance_from_spawn - 50) / 150
      
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 1.0})
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.Default, min = 0, max = 0, weight = scenario_loot_scalar})  
    elseif player_is_indoor then
        soulslike.debug("Player died indoor, oof.")
        -- TODO: Need to figure out this scenario later, not sure what to do....
        --       It will be very difficult to get your gear back, prob annoyingly frustrating...
        --       For now, no loss scenario
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 1.0})
    elseif fatal_hit and fatal_hit.killer_type == soulslike.entity_type.Stalker and fatal_hit.draftsman:id() == AC_ID then 
        soulslike.debug("Player killed themself. haha idiot.")

        rescuer = soulslike.find_closest_friendly_stalker()
        looter = soulslike.find_closest_enemy()
        scenario_loot_scalar = 0.75
        
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 0.05})

        if has_backpack then
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.Default, min = 0, max = 0, weight = 1.0})
        end 

        table.insert(available_scenarios, {id = soulslike.SCENARIOS.RFDetectorStash, min = 0, max = 0, weight = soulslike_mcm.rf_detector_scenario_weight()})
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.HiddenStash, min = 0, max = 0, weight = soulslike_mcm.hidden_stash_scenario_weight()})
    elseif fatal_hit and 
           fatal_hit.killer_type == soulslike.entity_type.Stalker and 
           fatal_hit.draftsman:general_goodwill(db.actor) >= relations.NEUTRALS then
        soulslike.debug("Friendly/Neutral Stalker killed the player.")

        rescuer = fatal_hit.draftsman
        looter = nil
        scenario_loot_scalar = 0.0

        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 1.0})
    elseif fatal_hit and 
           fatal_hit.killer_type == soulslike.entity_type.Stalker and 
           fatal_hit.draftsman:general_goodwill(db.actor) <= relations.ENEMIES then
        soulslike.debug("Enemy Stalker killed the player.")

        rescuer = soulslike.find_closest_friendly_stalker()
        looter = fatal_hit.draftsman
        scenario_loot_scalar = 1.0

        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 0.05})

        if has_backpack then
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.Default, min = 0, max = 0, weight = 1.0})
        end

        table.insert(available_scenarios, {id = soulslike.SCENARIOS.RFDetectorStash, min = 0, max = 0, weight = soulslike_mcm.rf_detector_scenario_weight()})
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.HiddenStash, min = 0, max = 0, weight = soulslike_mcm.hidden_stash_scenario_weight()})
    elseif fatal_hit and 
           fatal_hit.killer_type == soulslike.entity_type.Monster then
        soulslike.debug("Mutant killed the player.")

        rescuer = soulslike.find_closest_friendly_stalker()
        looter = fatal_hit.draftsman
        scenario_loot_scalar = 1.0

        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 0.05})

        if has_backpack then
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.Default, min = 0, max = 0, weight = 1.0})
        end

        table.insert(available_scenarios, {id = soulslike.SCENARIOS.RFDetectorStash, min = 0, max = 0, weight = soulslike_mcm.rf_detector_scenario_weight()})
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.HiddenStash, min = 0, max = 0, weight = soulslike_mcm.hidden_stash_scenario_weight()})
    elseif fatal_hit and 
           fatal_hit.killer_type == soulslike.entity_type.Anomaly then
        soulslike.debug("Player died to an anomaly.")

        rescuer = soulslike.find_closest_friendly_stalker()  
        looter = soulslike.find_closest_enemy()   
        scenario_loot_scalar = 0.25
        
        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 0.05})

        if has_backpack then
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.Default, min = 0, max = 0, weight = 1.0})
        else
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.RFDetectorStash, min = 0, max = 0, weight = soulslike_mcm.rf_detector_scenario_weight()})
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.HiddenStash, min = 0, max = 0, weight = soulslike_mcm.hidden_stash_scenario_weight()})
        end
    elseif fatal_hit and 
           fatal_hit.killer_type == soulslike.entity_type.Other then
        soulslike.debug("Player died to a DOT of some sort.")

        rescuer = soulslike.find_closest_friendly_stalker()     
        looter = soulslike.find_closest_enemy()   
        scenario_loot_scalar = 0.25

        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 0.05})

        if has_backpack then
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.Default, min = 0, max = 0, weight = 1.0})
        else
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.RFDetectorStash, min = 0, max = 0, weight = soulslike_mcm.rf_detector_scenario_weight()})
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.HiddenStash, min = 0, max = 0, weight = soulslike_mcm.hidden_stash_scenario_weight()})
        end
    else
        soulslike.warn("I have no idea how the player died.")

        rescuer = soulslike.find_closest_friendly_stalker()    
        looter = soulslike.find_closest_enemy()   
        scenario_loot_scalar = 0.25

        table.insert(available_scenarios, {id = soulslike.SCENARIOS.NoLoss, min = 0, max = 0, weight = 0.05})

        if has_backpack then
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.Default, min = 0, max = 0, weight = 1.0})
        else
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.RFDetectorStash, min = 0, max = 0, weight = soulslike_mcm.rf_detector_scenario_weight()})
            table.insert(available_scenarios, {id = soulslike.SCENARIOS.HiddenStash, min = 0, max = 0, weight = soulslike_mcm.hidden_stash_scenario_weight()})
        end
    end

    if looter and IsStalker(looter) then
        looter_type = soulslike.entity_type.Stalker
    elseif looter and IsMonster(looter) then
        looter_type = soulslike.entity_type.Monster
    end
    
    local is_in_water = load_var(db.actor,"grw_in_water") == true
    
    if is_in_water then
        soulslike.debug("Actor died in the water, reducing loot scalar.")
        scenario_loot_scalar = scenario_loot_scalar * 0.5
    end

    if #available_scenarios == 0 then
        soulslike.error("No scenario chosen because all scenario weights are at 0 and remove default was enabled.")
        return nil
    end

    local weight_sum = 0
    for _, value in pairs(available_scenarios) do
        weight_sum = weight_sum + value.weight
    end

    local min = 0
    for _, value in pairs(available_scenarios) do
        value.min = min + 1
        value.max = math.floor(min + (100 * (value.weight / weight_sum)))
        min = value.max
    end
    
    local roll = math.random(1, 100)    
    local scenario_id = nil
    for id, value in pairs(available_scenarios) do
        if(roll >= value.min and roll <= value.max) then
            scenario_id = id
            break
        end
    end

    if scenario_id == nil then
        soulslike.debug("ERROR: Unable to determine scenario from roll: "..tostring(roll))
        soulslike.debug(available_scenarios)  
        scenario_id = soulslike.SCENARIOS.NoLoss163
    end

    local scenario_logic = create_by_id(scenario_id)
    local level_name = level.name()

    scenario_logic:SetLevelName(game.translate_string(level_name))
    scenario_logic:SetLootScalar(scenario_loot_scalar)
    scenario_logic:SetIsInDoor(player_is_indoor)
    scenario_logic:SetIsInWater(is_in_water)
    scenario_logic:SetRescuer(rescuer)

    if looter then
        scenario_logic:SetLooter(looter)
        scenario_logic:SetLooterType(looter_type)
    end

    if fatal_hit then 
        scenario_logic:SetKillerType(fatal_hit.killer_type)
        scenario_logic:SetKiller(fatal_hit.draftsman)
        scenario_logic:SetFatalHitType(fatal_hit.type)
    end

    return scenario_logic
end
