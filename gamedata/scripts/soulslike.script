
--[[
	Jabbers
	05APR2023
	Jabbers' Soulslike Anomaly Mod
--]]

local version = "0.15-beta"

local m_data = {
    last_spawn_set_time = nil,
    uuid = nil,
    spawn_location = {
        level = nil,
        position = {
            x = nil,
            y = nil,
            z = nil,
        },
        angle = {
            x = nil,
            y = nil,
            z = nil,
        },
        level_vertex_id = nil,
        game_vertex_id = nil,
    },
    last_death_state = {
        dropped_backpack_id = nil,
        inventory_hidden = nil, 
        radio_freq = nil,
        stash_id = nil,
        items_lost = nil,
        enemy_looter_name = nil,
        enemy_looter_comm= nil,
    },    
    is_changing_levels = nil,    
    is_advancing_time = nil,
    created_stashes = {},
    hidden_stashes = {}
}

local ignore_list = {
    ["bolt"] = true,
    -- Quick Release
    ["itm_actor_backpack"] = true,
    ["device_pda"] = true,
    ["device_pda_1"] = true,
    ["device_pda_2"] = true,
    ["device_pda_3"] = true,
    ["wpn_knife"] = true,
}

local tools_list = {
    ["itm_basickit"] = true,
    ["itm_advancedkit"] = true,
    ["itm_expertkit"] = true,
    ["itm_drugkit"] = true,
    ["itm_ammokit"] = true,
    ["itm_gunsmith_toolkit"] = true,
    ["itm_artefactskit"] = true,
}

local relations = { 
    FRIENDS = 1000,    
    BUDDIES = 500,
    NEUTRALS = 0,
    ENEMIES = -1000
}

function IsSoulslikeMode()
	return not IsHardcoreMode() and axr_main.config and axr_main.config:r_value("character_creation","new_game_soulslike_mode",1) == true or alife_storage_manager.get_state().enable_soulslike_mode == true
end

----------------------------------------
-- DEBUG
----------------------------------------

local function print_table (tbl, indent)
    if not indent then
        indent = 0
    end

    utils_data.debug_write(string.rep(" ", indent) .. "{")

    indent = indent + 2

    if (type(tbl) == "userdata") then        
        utils_data.debug_write("<userdata>,\n")
    else
        for k, v in pairs(tbl) do
            local toprint = string.rep(" ", indent)

            if (type(k) == "number") then
                toprint = toprint .. "[" .. k .. "] = "
            elseif (type(k) == "string") then
                toprint = toprint  .. k ..  " = "
            end

            if (type(v) == "number") then
                utils_data.debug_write(toprint .. v .. ",")
            elseif (type(v) == "string") then
                utils_data.debug_write(toprint .. "\"" .. v .. "\",")
            elseif (type(v) == "table") then
                utils_data.debug_write(toprint)
                print_table(v, indent + 2)
            else
                utils_data.debug_write(toprint .. "\"" .. tostring(v) .. "\",")
            end
        end
    end

    utils_data.debug_write(string.rep(" ", indent-2) .. "}")
end

local function debug(output)
    if not output then
        utils_data.debug_write("[Soulslike] ".."(nil)")
    end
    if (type(output) == "table") then
        utils_data.debug_write("[Soulslike] ")
        print_table(output)
    else
        utils_data.debug_write("[Soulslike] "..output)
    end
end

----------------------------------------
-- MCM Config Values
----------------------------------------

local function is_hardcore_save_enabled() 
    return soulslike_mcm.get_config("is_hardcore_save_enabled", false)
end

local function is_debug_enabled() 
    return soulslike_mcm.get_config("debug", true)
end

local function get_item_loss_scalar()
    return soulslike_mcm.get_config("item_loss_scalar", 0.2)
end

local function get_item_condition_loss_percent()
    return soulslike_mcm.get_config("item_condition_loss_scalar", 0.05)
end

local function get_health_loss_on_respawn()
    return soulslike_mcm.get_config("health_loss_on_respawn", 0.75)
end

local function override_campfire_hardcore_saves() 
    return soulslike_mcm.get_config("override_campfire_hardcore_saves", false)
end

local function lost_items_looted_by_npcs() 
    return soulslike_mcm.get_config("lost_items_looted_by_npcs", true)
end

local function are_looter_npcs_marked()
    return soulslike_mcm.get_config("looter_npcs_marked", false)
end 

local function rf_detector_recovery_task_chance()
    return soulslike_mcm.get_config("rf_detector_recovery_task_chance", 0.1)
end 

local function allow_toolkit_loss()
    return soulslike_mcm.get_config("allow_tool_loss", true)
end 

local function allow_artifact_loss()
    return soulslike_mcm.get_config("allow_artifact_loss", true)
end 

local function allow_headgear_loss()
    return soulslike_mcm.get_config("allow_headgear_loss", true)
end 

local function allow_outfit_loss()
    return soulslike_mcm.get_config("allow_outfit_loss", true)
end 

local function allow_weapon_loss()
    return soulslike_mcm.get_config("allow_weapon_loss", true)
end 

local function rank_loss_percent()
    return soulslike_mcm.get_config("rank_loss_percent", 0.05)
end 

local function rep_loss_percent()
    return soulslike_mcm.get_config("rep_loss_percent", 0.02)
end 

local function debug_hidden_stashes()
    return is_debug_enabled() and soulslike_mcm.get_config("debug_hidden_stashes", false)
end 

local function debug_item_loss()
    return is_debug_enabled() and soulslike_mcm.get_config("debug_item_loss", false)
end 

function set_spawn(show_message)
	local se_actor = alife():actor()

	m_data.spawn_location.level = level.name()
	m_data.spawn_location.position.x= se_actor.position.x
	m_data.spawn_location.position.y = se_actor.position.y
	m_data.spawn_location.position.z = se_actor.position.z
	m_data.spawn_location.angle.x = se_actor.angle.x
	m_data.spawn_location.angle.y = se_actor.angle.y
	m_data.spawn_location.angle.z = se_actor.angle.z
	m_data.spawn_location.level_vertex_id = se_actor.m_level_vertex_id
	m_data.spawn_location.game_vertex_id = se_actor.m_game_vertex_id
    
    debug("Saved spawn location data:")
    debug(m_data.spawn_location)    
            
    if show_message then
        local str = game.translate_string("st_soulslike_spawn_location_set")
        actor_menu.set_msg(1, str, 4)
    end
end

local function respawn_actor()    
    debug("Respawning actor at last sleep location")
      
    local position = vector():set(m_data.spawn_location.position.x, m_data.spawn_location.position.y, m_data.spawn_location.position.z)   
    local level_vertex_id = m_data.spawn_location.level_vertex_id
    local game_vertex_id = m_data.spawn_location.game_vertex_id  
    
    level.add_pp_effector("black_infinite.ppe", 5606, true)
    m_data.is_changing_levels = true
    actor_status.deactivate_hud()

    local function respawn()
        ChangeLevel(position, level_vertex_id, game_vertex_id, VEC_ZERO, false)
    end

	CreateTimeEvent(0, "respawn", 1, respawn)
end

local function create_hidden_stash()
    -- For some reason, "box_in_same_map" doesn't actually mean same map in the treasure_manager.
    local function box_in_same_map(id)
        local obj1 = alife():actor()
        local obj2 = alife_object(id)
        return simulation_objects.is_on_the_same_level(obj1, obj2)
    end
    local old_box_in_same_map = treasure_manager.box_in_same_map
    treasure_manager.box_in_same_map = box_in_same_map
    local id = treasure_manager.get_random_stash("treasure", nil ,true, true)
    treasure_manager.box_in_same_map = old_box_in_same_map

    -- If we could not grab a ransom stash, we need to return nil so we don't transfer anything
    if not id then return nil end

    debug("Random stash found: "..tostring(id))    

    local actor = db.actor
    local se_stash = alife_create("hidden_box", actor:position(), actor:level_vertex_id(), actor:game_vertex_id())
    m_data.hidden_stashes[id] = {
        stash_id = se_stash.id,
        radio_id = id
    } 

    if debug_hidden_stashes() then
        level.map_add_object_spot_ser(id, "secondary_task_location", "DEBUG: RF STASH.") 
    end          
        
    m_data.last_death_state.stash_id = id
    m_data.last_death_state.inventory_hidden = true

    return se_stash
end

local function create_stash()   
    debug("Creating stash")    

    local backpack = db.actor:item_in_slot(13)
    local se_stash = nil
    local actor = db.actor
 
    if debug_hidden_stashes() or not backpack then 
        -- If the player doesn't have a backpack equiped, we will just respawn them with all the items 
        -- in their inventory.  
        debug("Player does not have a backpack equipped")  
        se_stash = create_hidden_stash()
    else
        local roll = math.random(1,100)

        if roll <= rf_detector_recovery_task_chance() then
            debug("Random stash roll.")  
            se_stash = create_hidden_stash()
        else
            se_stash = alife_create("inv_backpack", actor:position(), actor:level_vertex_id(), actor:game_vertex_id())        
            m_data.last_death_state.dropped_backpack_id = backpack:id()
        end
    end

    if (se_stash) then
        m_data.created_stashes[se_stash.id] = {
            lost_items = {},
            examine = false
        } 
    end

    return se_stash
end

function math.clamp(x, min, max)
    if x < min then return min end
    if x > max then return max end
    return x
end

local function find_enemy()
    local enemy = nil
	for i=1, #db.OnlineStalkers do
		local id = db.OnlineStalkers[i]
		enemy = level.object_by_id(id)
        if enemy then
            local is_enemy = enemy:general_goodwill(db.actor) <= relations.ENEMIES
            if enemy:alive() and   
                (not get_object_story_id(id)) and
                is_enemy then
                local comm = enemy:character_community()
                debug("Found enemy "..enemy:name().." from the "..comm.." community.")
                return enemy
            end
        end
    end
end

local function find_actor_community_friendly()  
    local friend = nil
    local actor_comm = db.actor:character_community():sub(7) -- removes "actor_"

    debug("Actor community "..actor_comm)

	for i=1, #db.OnlineStalkers do
		local id = db.OnlineStalkers[i]
		friend = db.storage[id] and db.storage[id].object or level.object_by_id(id)
        if friend then
			local comm = friend:character_community()
            debug("Found friend "..friend:name().." from the "..comm.." community.")  

            if friend:alive() and   
               comm == actor_comm and
               (not get_object_story_id(id)) then
                debug("Found friend "..friend:name().." from the "..comm.." community.")
                break
            end
        else 
            friend = nil
        end
    end

    return friend
end

local function IsToolkit(o, s)
    if not (s) then
		s = o and o:section()
	end
    return tools_list[s]
end

local function transfer_loot(id)
    local slot_backpack_id = nil
    
    if m_data.last_death_state.dropped_backpack_id then 
         local slot_backpack = db.actor:item_in_slot(13)
         slot_backpack_id = slot_backpack:id()
    end 

    local rank = db.actor:character_rank()
    local ranked_chance = math.clamp(math.sqrt(rank / 500) * math.log(rank * rank)/math.log(1000) * 1.5, 0, 50) / 66;
    local item_condition_loss_percent = get_item_condition_loss_percent()
    local item_loss_scalar = get_item_loss_scalar()
    local backpack = level.object_by_id(id)
    local enemy_looter = find_enemy()
    local enemy_looted = false
    
    local function release_actor_item(temp, item)
        local sec = item:section()

        if ignore_list[sec] then
            debug("Item is in ignore list: "..sec)
            return
        end

        if ini_sys:r_bool_ex(sec,"quest_item",false) then
            debug("Item quest item: "..sec)
            return
        end
        
        local loss_chance_dice_roll = math.random(0, 100)
        local loss_chance = math.floor(ranked_chance * item_loss_scalar * 100)
        
        loss_chance = math.clamp(loss_chance, 0, 100)

        if debug_item_loss() then
            loss_chance = 100
        end

        debug("item_loss_scalar: "..item_loss_scalar.." loss_chance_dice_roll: "..loss_chance_dice_roll.." rank: "..rank.." ranked_chance: "..ranked_chance.." loss_chance: "..loss_chance);

        local is_grenade = IsGrenade(item)
        local is_artefact = IsArtefact(item)
        local is_weapon = (IsWeapon(item) and not is_grenade)
        local is_outfit = IsOutfit(item) 
        local is_headgear = IsHeadgear(item)
        local is_toolkit = IsToolkit(item)

        if is_weapon and not allow_weapon_loss() then   
            debug("Not allowed to lose weapon "..sec)
            return
        end

        if is_artefact and not allow_artifact_loss() then   
            debug("Not allowed to lose artefact "..sec)
            return
        end

        if is_outfit and not allow_outfit_loss() then   
            debug("Not allowed to lose outfit "..sec)
            return
        end

        if is_headgear and not allow_headgear_loss() then   
            debug("Not allowed to lose headgear "..sec)
            return
        end

        if is_toolkit and not allow_toolkit_loss() then   
            debug("Not allowed to lose toolkit "..sec)
            return
        end

        -- We never want to delete the players backpack
        -- since it makes up the created stash
        if item:id() ~= slot_backpack_id and loss_chance ~= 0 and loss_chance_dice_roll < loss_chance then
            m_data.last_death_state.items_lost = true                
            loss_chance_dice_roll = math.random(0, 100)

            -- I call this The Tarkov Looter... 
            -- This shit is going to be funny as fuck for me to know that there is a 5% chance for this to happen 
            if loss_chance_dice_roll <= 5 and is_weapon and item_parts then
                local parts = item_parts.get_parts_con(item)
                if parts then
                    local keys = {}
                    local numitems = 0 
                    for k,v in pairs(parts) do
                        numitems = numitems + 1
                        table.insert(keys, k)
                    end
                    local index = math.random(1, numitems)
                    parts[keys[index]] = -1 -- KEKW
                    enemy_looted = true     
                end    
                
                debug("Transfering item "..sec)
                db.actor:transfer_item(item, backpack)
                return       
            else
                local allow_npc_looting = lost_items_looted_by_npcs()

                if(allow_npc_looting and (is_weapon or is_outfit or is_headgear) and enemy_looter) then   
                    debug("Transfering item to enemy: "..sec)   
                    table.insert(m_data.created_stashes[id].lost_items, sec)                
                    db.actor:transfer_item(item, enemy_looter)
                    enemy_looted = true
                else
                    debug("Item lost "..sec)            
                    alife_release(item)
                    table.insert(m_data.created_stashes[id].lost_items, sec)
                end
            end
            
            return   
        end

        if item_condition_loss_percent > 0 then
            local cond = item:condition()
            local condition_loss_percent = math.clamp(ranked_chance * item_condition_loss_percent, 0, 1)
            local degrade_factor = cond * condition_loss_percent
            
            debug("condition_loss_percent: "..condition_loss_percent.." rank: "..rank.." ranked_chance: "..ranked_chance.." degrade_factor: "..degrade_factor);
   
            local use_condition = utils_item.is_degradable(item, sec)
	        local has_cond = use_condition or is_weapon or is_outfit or is_headgear

            debug("Checking item sec="..tostring(sec).." is_weapon="..tostring(is_weapon).." is_outfit="..tostring(is_outfit).." is_headgear="..tostring(is_headgear).." use_condition="..tostring(use_condition))
                
            if has_cond then
                debug("Degrading ".. sec.. " condition ".. tostring(cond).." by "..tostring(degrade_factor))

                -- utils_item.degrade releases the item if the condition is 0
                local condition = utils_item.degrade(item, degrade_factor)

                if condition == 0 then
                    debug("Item ".. sec.. " was degraded into oblivion")
                    m_data.last_death_state.items_lost = true
                    table.insert(m_data.created_stashes[id].lost_items, sec)
                    return;
                end
            end
        end
            
        debug("Transfering item "..sec)
        db.actor:transfer_item(item, backpack)
    end     
    
    debug("Transfering items")
    db.actor:iterate_inventory(release_actor_item)

    if enemy_looter and enemy_looted then        
        m_data.last_death_state.enemy_looter_name = enemy_looter:character_name()
        m_data.last_death_state.enemy_looter_comm = enemy_looter:character_community()

        if are_looter_npcs_marked() then
            level.map_add_object_spot_ser(enemy_looter:id(), "secondary_task_location", m_data.last_death_state.enemy_looter_name)            
        end
    end
end

local function add_marker_to_pda(id)
    debug("Adding backpack marker to PDA")
    level.map_add_object_spot_ser(id, "primary_object", db.actor:character_name() .. " items")
end

local function stop_surge_and_storm()            
    -- skip surge due to bug with killing actor on switch
    surge_manager.stop_surge()    
    if (psi_storm_manager.get_psi_storm_manager().started) then
        psi_storm_manager.get_psi_storm_manager().finish(true)
    end
end

local function inventory_pre_conditions()
    local is_magazine					= magazine_binder and magazine_binder.is_magazine
    local is_carried_mag				= magazine_binder and magazine_binder.is_carried_mag
    local toggle_carried_mag			= magazine_binder and magazine_binder.toggle_carried_mag

    local function check_item(temp, item)
        local sec = item:section()
        if is_magazine and is_magazine(sec) and is_carried_mag(item:id()) then
            debug("Toggling carried mag: "..sec)
            local result = toggle_carried_mag(item:id())
            debug("Mag toggled to: "..tostring(result))

        end
    end

    debug("Inventory precondition checks")
    db.actor:iterate_inventory(check_item)
end

local function create_stash_and_respawn()    
    inventory_pre_conditions()    
    local se_stash = create_stash()
             
    if se_stash then
        debug("Stash created "..tostring(se_stash.id))
        local function transfer_and_respawn()
            local pack = level.object_by_id(se_stash.id)

            if pack then
                debug("Stash exists in game")

                transfer_loot(se_stash.id)    
                if m_data.last_death_state.dropped_backpack_id then
                    add_marker_to_pda(se_stash.id)   
                elseif m_data.last_death_state.stash_id then
                    local lvl = level.name()
                    debug("Adding radio target to level: "..lvl)
                    m_data.last_death_state.radio_freq = math.random(30,  300)
                    item_radio.add_stash(lvl, m_data.last_death_state.stash_id, m_data.last_death_state.radio_freq) 
                end   

                respawn_actor()
                stop_surge_and_storm()
                return true
            else
                debug("Stash does not yet exist in game")            
                return false
            end
        end
        
        --We have to create a timer to give the game time to spawn the backpack.
        CreateTimeEvent(0, "transfer_and_respawn", 0, transfer_and_respawn)
    else    
        debug("Stash was not created")
        respawn_actor()
        stop_surge_and_storm()
    end

end

local function remove_prior_saves(last_save_file_name)    
    last_save_file_name = string.lower(last_save_file_name)

    debug("Don't delete: ".. last_save_file_name)

	local uuid = m_data.uuid	
	local fs = getFS()
	local flist = fs:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.scoc")
	local f_cnt = flist:Size()

	for	it=0, f_cnt-1 	do
		local file = flist:GetAt(it)
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(".scoc")))
        
		local scoc_path = fs:update_path('$game_saves$', '')..file_name..".scoc"
		local scop_path = fs:update_path('$game_saves$', '')..file_name..".scop"
		local dds_path = fs:update_path('$game_saves$', '')..file_name..".dds"

		local f = io.open(scoc_path,"rb")

		if (f) then
			local data = f:read("*all")
			f:close()

			if (data) then
				local decoded = alife_storage_manager.decode(data)
				local d_soulslike = decoded and decoded.soulslike
                
				if (d_soulslike and (d_soulslike.uuid == uuid)) then
					debug("/ Soulslike mode | file: "..file_name)
                    file_name = string.lower(file_name)
					if file_name ~= last_save_file_name then
						debug("~ Soulslike mode | delete save file: "..file_name)

                        local scoc_path_bak = fs:update_path('$game_saves$', '').."soulslike-backup/"..file_name..".scoc"
                        local scop_path_bak = fs:update_path('$game_saves$', '').."soulslike-backup/"..file_name..".scop"
                        local dds_path_bak = fs:update_path('$game_saves$', '').."soulslike-backup/"..file_name..".dds"

                        fs:file_copy(scoc_path, scoc_path_bak)
                        fs:file_copy(scop_path, scop_path_bak)
                        fs:file_copy(dds_path, dds_path_bak)

						ui_load_dialog.delete_save_game(file_name)			
					end
				end
			end
		end
	end
end

local function force_save(type)
	--if game isn't already paused, then force a pause here
	local force_pause
	if not (device():is_paused()) then 
		device():pause(true)
		force_pause = true
	end
	local Y, M, D, h
    Y, M, D, h = game.get_game_time():get(Y, M, D, h)
    
    local m = level.get_time_minutes()
    if m < 10 then
        m = ("0"..m)
    end
    
    local comm = utils_xml.get_special_txt(db.actor:character_community())
    local map = utils_xml.get_special_txt(level.name())
    local date = string.format("%d.%d.%d %d-%d", D, M, Y, h, m)
    local file_name = "soulslike_"..comm.." - "..map.." "..date.." - "..type

	exec_console_cmd("save ".. file_name)
    
	if (force_pause) then 
		device():pause(false)
	end
end

local function heal()
    local heath = 1 - get_health_loss_on_respawn()

	db.actor:set_health_ex(heath)
	db.actor.power = 1
	db.actor.radiation = 0
	db.actor.bleeding = 1
	db.actor.psy_health = 1

    save_var(db.actor,'grw_in_water',nil)
	
    arszi_psy.set_psy_health(1.0)
end

local function lose_rank()
    local rank = db.actor:character_rank()
    local loss_percent = rank_loss_percent()
    local rank_loss = math.abs(rank * loss_percent)

    debug("Player has lost "..tostring(rank_loss).." rank.")

	db.actor:set_character_rank(db.actor:character_rank() + (-rank_loss or 0))
	game_statistics.check_for_rank_change()
end

local function lose_rep()
    local rep = db.actor:character_reputation()
    local loss_percent = rep_loss_percent()
    local rep_loss = math.abs(rep * loss_percent)

    debug("Player has lost "..tostring(rep_loss).." repuation.")

	db.actor:set_character_reputation(db.actor:character_reputation() + (-rep_loss or 0))
	game_statistics.check_for_reputation_change()
end

local function actor_on_before_death(who, flags)    
    if not IsSoulslikeMode() then
        return
    end

    -- Pretty sure this fixes arena fights, still need to test
	if has_alife_info("bar_arena_fight") then
        debug('Actor was in an arena fight, ignoring death.')
		return
	end

	flags.ret_value = false

    debug('Actor died')
    
	heal()
    lose_rank()
    lose_rep();

	bind_stalker_ext.invulnerable_time = time_global() + 30000 
    level.add_pp_effector("black_infinite.ppe", 5606, true)

    create_stash_and_respawn()
end

local function on_before_save_input(flags, type, text)
    if not IsSoulslikeMode() then
        return
    end    

    -- No hardcore save setting, allow saving
    if not is_hardcore_save_enabled() then 
        return
    end

    -- Hardcore save is enabled, but we still want to save at campfires
    -- We just return to let the regular saving work.
    if override_campfire_hardcore_saves() then        
        return
    end
    
    -- All other scenarios flow through here and we just disallow saving
    if not level_weathers.valid_levels[level.name()] then
        return
    end

    debug('User tried to save')

    local str = game.translate_string("st_save_only_when_sleeping")
    actor_menu.set_msg(1, str, 4)
    exec_console_cmd("main_menu off")
    flags.ret = true
end

local function save_state(data)
    if not IsSoulslikeMode() then
        return
    end
    
    debug('save_state')

    data.soulslike = m_data
end

local function load_state(data)
    debug('load_state')

    if not data.soulslike  then
        return
    end

    m_data = data.soulslike 
end

local function actor_on_sleep(hours)    
    if not IsSoulslikeMode() then
        return
    end

    debug('actor_on_sleep')
    
    if not m_data.is_advancing_time then 
        force_save("sleep")
    end
end

function dream_callback()
    level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "soulslike.save_and_wake_callback")
	
	local hours = math.random(6,14)	
	level.change_game_time(0,hours,0)
	
	db.actor.power = 1
	
	SendScriptCallback("actor_on_sleep",hours)
end

-- TODO: Reactor this into a class
local function rescuer_initial_msg_factory() 
    local messages = {
        "st_soulslike_rescuer_initial_1",
        "st_soulslike_rescuer_initial_2",
        "st_soulslike_rescuer_initial_3",
        "st_soulslike_rescuer_initial_4",
        "st_soulslike_rescuer_initial_5",
        "st_soulslike_rescuer_initial_6",
        "st_soulslike_rescuer_initial_7",
        "st_soulslike_rescuer_initial_8",
        "st_soulslike_rescuer_initial_9",
        "st_soulslike_rescuer_initial_10",
        "st_soulslike_rescuer_initial_11",
        "st_soulslike_rescuer_initial_12",
        "st_soulslike_rescuer_initial_13",
        "st_soulslike_rescuer_initial_14",
        "st_soulslike_rescuer_initial_15",
        "st_soulslike_rescuer_initial_16",
    }

    return game.translate_string(messages[math.random(#messages)])
end

local function rescuer_eat_drink_msg_factory() 
    local messages = {
        "st_soulslike_rescuer_food_1",
        "st_soulslike_rescuer_food_2",
        "st_soulslike_rescuer_food_3",
        "st_soulslike_rescuer_food_4",
        "st_soulslike_rescuer_food_5",
    }

    return game.translate_string(messages[math.random(#messages)])
end

local function rescuer_pda_marker_msg_factory()
    local messages = {
        "st_soulslike_rescuer_pda_1",
        "st_soulslike_rescuer_pda_2",
        "st_soulslike_rescuer_pda_3",
        "st_soulslike_rescuer_pda_4",
        "st_soulslike_rescuer_pda_5",
        "st_soulslike_rescuer_pda_6",
        "st_soulslike_rescuer_pda_7",
        "st_soulslike_rescuer_pda_8",
        "st_soulslike_rescuer_pda_9",
        "st_soulslike_rescuer_pda_10",
        "st_soulslike_rescuer_pda_11",
        "st_soulslike_rescuer_pda_12",
        "st_soulslike_rescuer_pda_13",
        "st_soulslike_rescuer_pda_14",
        "st_soulslike_rescuer_pda_15",
        "st_soulslike_rescuer_pda_16",
    }

    return game.translate_string(messages[math.random(#messages)])
end

local function rescuer_used_items_msg_factory()
    local messages = {
        "st_soulslike_rescuer_used_items_1",
        "st_soulslike_rescuer_used_items_2",
        "st_soulslike_rescuer_used_items_3",
        "st_soulslike_rescuer_used_items_4",
        "st_soulslike_rescuer_used_items_5",
        "st_soulslike_rescuer_used_items_6",
        "st_soulslike_rescuer_used_items_7",
        "st_soulslike_rescuer_used_items_8",
        "st_soulslike_rescuer_used_items_9",
        "st_soulslike_rescuer_used_items_10",
        "st_soulslike_rescuer_used_items_11",
        "st_soulslike_rescuer_used_items_12",
        "st_soulslike_rescuer_used_items_13",
        "st_soulslike_rescuer_used_items_14",
        "st_soulslike_rescuer_used_items_15",
        "st_soulslike_rescuer_used_items_16",
    }

    return game.translate_string(messages[math.random(#messages)])
end

local function rescuer_stay_safe_msg_factory()
    local messages = {
        "st_soulslike_rescuer_stay_safe_1",
        "st_soulslike_rescuer_stay_safe_2",
        "st_soulslike_rescuer_stay_safe_3",
        "st_soulslike_rescuer_stay_safe_4",
        "st_soulslike_rescuer_stay_safe_5",
        "st_soulslike_rescuer_stay_safe_6",
        "st_soulslike_rescuer_stay_safe_7",
        "st_soulslike_rescuer_stay_safe_8",
        "st_soulslike_rescuer_stay_safe_9",
        "st_soulslike_rescuer_stay_safe_10",
        "st_soulslike_rescuer_stay_safe_11",
        "st_soulslike_rescuer_stay_safe_12",
        "st_soulslike_rescuer_stay_safe_13",
        "st_soulslike_rescuer_stay_safe_14",
        "st_soulslike_rescuer_stay_safe_15",
    }

    return game.translate_string(messages[math.random(#messages)])
end

local function rescuer_enemy_looter_msg_factory(enemy_name, enemy_comm)
    local messages = {
        "st_soulslike_rescuer_radio_freq_1",
        "st_soulslike_rescuer_enemy_looter_2",
        "st_soulslike_rescuer_enemy_looter_3",
        "st_soulslike_rescuer_enemy_looter_4",
        "st_soulslike_rescuer_enemy_looter_5",
        "st_soulslike_rescuer_enemy_looter_6",
        "st_soulslike_rescuer_enemy_looter_7",
        "st_soulslike_rescuer_enemy_looter_8",
        "st_soulslike_rescuer_enemy_looter_9",
        "st_soulslike_rescuer_enemy_looter_10",
        "st_soulslike_rescuer_enemy_looter_11",
        "st_soulslike_rescuer_enemy_looter_12",
        "st_soulslike_rescuer_enemy_looter_13",
        "st_soulslike_rescuer_enemy_looter_14",
        "st_soulslike_rescuer_enemy_looter_15",
    }
    
    return strformat(game.translate_string(messages[math.random(#messages)]), enemy_comm, enemy_name)
end
local function rescuer_enemy_radio_freq_msg_factory(freq)
    local messages = {
        "st_soulslike_rescuer_radio_freq_1",
        "st_soulslike_rescuer_radio_freq_2",
        "st_soulslike_rescuer_radio_freq_3",
        "st_soulslike_rescuer_radio_freq_4",
        "st_soulslike_rescuer_radio_freq_5",
        "st_soulslike_rescuer_radio_freq_6",
        "st_soulslike_rescuer_radio_freq_7",
        "st_soulslike_rescuer_radio_freq_8",
        "st_soulslike_rescuer_radio_freq_9",
        "st_soulslike_rescuer_radio_freq_10",
        "st_soulslike_rescuer_radio_freq_11",
        "st_soulslike_rescuer_radio_freq_12",
        "st_soulslike_rescuer_radio_freq_13",
        "st_soulslike_rescuer_radio_freq_14",
        "st_soulslike_rescuer_radio_freq_15",
    }
    
    return strformat(game.translate_string(messages[math.random(#messages)]), freq)
end

local function send_rescuer_message(gave_food_or_water)
    local rescuer = find_actor_community_friendly()

    if rescuer then
        local msg = rescuer_initial_msg_factory()
        local enemy_name = m_data.last_death_state.enemy_looter_name
        local enemy_comm = m_data.last_death_state.enemy_looter_comm
        debug({enemy_name, enemy_comm})
        if gave_food_or_water then
            msg = msg.." "..rescuer_eat_drink_msg_factory()
        end
        if enemy_name and enemy_comm then
            msg = msg.." "..rescuer_enemy_looter_msg_factory(enemy_name, enemy_comm)
        end
        if m_data.last_death_state.dropped_backpack_id then
            msg = msg.." "..rescuer_pda_marker_msg_factory()
        end
        if m_data.last_death_state.stash_id then
            msg = msg.." "..rescuer_enemy_radio_freq_msg_factory(m_data.last_death_state.radio_freq)
        end
        if m_data.last_death_state.items_lost then
            msg = msg.." "..rescuer_used_items_msg_factory()            
        end
        msg = msg.." "..rescuer_stay_safe_msg_factory()
        news_manager.send_tip(db.actor, msg, nil, rescuer, 20000)
    else
        -- TODO: Reactor this into a factory class
        local msg = game.translate_string("st_soulslike_rescuer_initial_generic")
        if gave_food_or_water then
            msg = msg.." "..game.translate_string("st_soulslike_rescuer_food_generic")
        end
        if m_data.last_death_state.dropped_backpack_id then
            msg = msg.." " ..game.translate_string("st_soulslike_rescuer_pda_generic")
        end
        if m_data.last_death_state.stash_id then
            msg = msg.." "..game.translate_string("st_soulslike_rescuer_radio_generic")
        end
		local ui_sender = news_manager.tips_icons['default']
        db.actor:give_game_news("", msg, ui_sender, 0, 20000)
    end  
end

function save_and_wake_callback()
	xr_effects.enable_ui(db.actor, nil)

	exec_console_cmd("snd_volume_music "..tostring(_G.mus_vol))
	exec_console_cmd("snd_volume_eff "..tostring(_G.amb_vol))

    force_save("respawn")

	_G.amb_vol = 0
	_G.mus_vol = 0

	disable_info("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
    
    local gave_food_or_water

	-- Satiety
	local conditions = db.actor:cast_Actor():conditions()
	local satiety = conditions:GetSatiety()
	local red_icon_satiety = conditions:SatietyCritical() * 0.5
	
    satiety = normalize(satiety, red_icon_satiety, 1)
    satiety = clamp( satiety / 5.65 , 0, 0.185)

    debug({satiety = satiety})
    if satiety < 0.5 then
        gave_food_or_water = true  
        --debug("HACK updating satiety.")
	    db.actor.satiety = 0.5
    end

	-- Thirst
	local thirst = 1 - actor_status_thirst.get_water_deprivation()		-- 1 full
	local red_icon_thirst = 5760
	red_icon_thirst = 1 - normalize(red_icon_thirst, 0, 10000)		-- def 0.424 red
	
    thirst = normalize(thirst, red_icon_thirst, 1)
    thirst = clamp(thirst / 5.65, 0, 0.185)

    debug({thirst = thirst})

    if thirst < 0.5 then
        gave_food_or_water = true
        -- HACK... deal with it :shades:
        debug("HACK updating thirst.")
        actor_status_thirst.load_state({drink = {last_drink = 3500, chk_drink = nil}})
        actor_status_thirst.actor_on_update()
    end

    if gave_food_or_water then
        debug("Spawning bread and water on actor.")
        alife_create_item('bread', db.actor)
        alife_create_item('water_drink', db.actor)
    end

    send_rescuer_message(gave_food_or_water)

    actor_status.activate_hud()

    m_data.last_death_state.items_lost = nil
    m_data.last_death_state.inventory_hidden = nil
    m_data.last_death_state.dropped_backpack_id = nil
    m_data.last_death_state.radio_freq = nil
    m_data.last_death_state.stash_id = nil
    m_data.last_death_state.enemy_looter_name = nil
    m_data.last_death_state.enemy_looter_comm = nil
    m_data.is_advancing_time = true
end

local function advance_time() 
    m_data.is_advancing_time = true

    xr_effects.disable_ui(db.actor, nil)

    level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "soulslike.dream_callback")
    level.add_pp_effector("sleep_fade.ppe", 11, false)

    _G.mus_vol = get_console_cmd(2,"snd_volume_music")
    _G.amb_vol = get_console_cmd(2,"snd_volume_eff")

    exec_console_cmd("snd_volume_music 0")
    exec_console_cmd("snd_volume_eff 0")

    level.add_pp_effector("surge_fade.ppe", 11, false) 
    db.actor:give_info_portion("actor_is_sleeping")
end

local function on_game_load()        
    if not IsSoulslikeMode() then
        return
    end

    debug('Version: '..version)

    if not m_data.uuid then        
        m_data.uuid = GAME_VERSION .. "_" .. tostring(math.random(100)) .. tostring(math.random()) .. tostring(math.random(1000))
    end

    if m_data.is_changing_levels then
        m_data.is_changing_levels = nil
		bind_stalker_ext.invulnerable_time = time_global() + 1

        heal()    
        advance_time()
    end
    
    local rank = db.actor:character_rank()
    local rep = db.actor:character_reputation()

    debug('Character rank: '..rank)
    debug('Character rep: '..rep)
end

local function tablelength(T)
    local count = 0
    for _ in pairs(T) do count = count + 1 end
    return count
end

local function try_send_inventory_examined_message(stash_id)    
    local stash_data = m_data.created_stashes[stash_id]
    if not stash_data.examine then        
        debug('Stash not yet examined.')
        local lost_items = stash_data.lost_items

        debug(lost_items)
        debug('Item lost count = '..tostring(#lost_items))
        debug('Item lost count = '..tostring(tablelength(lost_items)))

        if #lost_items > 0 then

            local msg = "You examine your belongings and find that you were missing the following items: "
            local item_groups = {}
            
            for k, sec in pairs(lost_items) do
                if not item_groups[sec] then 
                    item_groups[sec] = {
                        section = sec,
                        count = 1
                    }
                else
                    item_groups[sec].count = item_groups[sec].count + 1
                end
            end

            local item_names = {}
            
            for k, group in pairs(item_groups) do
                local inv_name = ui_item.get_sec_name(group.section)
                if group.count > 1 then
                    table.insert(item_names, tostring(group.count).." x "..inv_name)                    
                else
                    table.insert(item_names, inv_name)                    
                end
            end
            
            msg = msg..table.concat(item_names, ", ")

            local ui_sender = news_manager.tips_icons['default']
            db.actor:give_game_news("", msg, ui_sender, 0, 20000)
            
            stash_data.examine = true
        end
    end
end

local function actor_on_item_take_from_box(box,obj)
    if not IsSoulslikeMode() then
        return
    end

    local id = box:id()
    debug('Player opened stash id '..tostring(id))
    
	if (box:section() == "inv_backpack") then
        if (box:is_inv_box_empty()) then
            hide_hud_inventory()
            
            local se_obj = alife_object(id)

            if se_obj then
                alife_release(se_obj)
                try_send_inventory_examined_message(id)
                m_data.created_stashes[id] = nil
            end
        end
	end
end

local function actor_on_stash_remove(data)
    if not IsSoulslikeMode() then
        return
    end

    if m_data.created_stashes[data.stash_id] then
        data.cancel = true    
        try_send_inventory_examined_message(data.stash_id)
    end
end

local function on_console_execute(name, ...)
    if not IsSoulslikeMode() then
        return
    end

    if(name == "save") then
        debug(name)

        local extraArgs = {...}

        if extraArgs then
            local file_name = table.concat(extraArgs," ")
            debug(file_name)
            if is_hardcore_save_enabled() then
                remove_prior_saves(file_name)
            end
        end
    end
end

local function physic_object_on_use_callback(box, who)
    if not IsInvbox(box) or not m_data.hidden_stashes or not m_data.hidden_stashes[box:id()] then
        return
    end

    local data = m_data.hidden_stashes[box:id()]

    local stash_id = data.stash_id
    local stash = level.object_by_id(stash_id)

    if not stash then        
        debug("Not expected, unable to find stash id linked to Invbox.. ")
    end

    local function transfer_item(temp,item)
        debug("Transfering item "..item:section())    
        stash:transfer_item(item, box)
    end

	item_radio.clear_stash(data.radio_id) 
	item_radio.clear_stash(data.stash_id) 

    debug("Transfering items from hidden stash to static stash.")    
    stash:iterate_inventory_box(transfer_item)      
    alife_release(stash)
    

    m_data.hidden_stashes[box:id()] = nil
    m_data.created_stashes[stash_id] = nil
end

function on_game_start()
    RegisterScriptCallback("actor_on_stash_remove", actor_on_stash_remove)
    RegisterScriptCallback("actor_on_item_take_from_box",actor_on_item_take_from_box)
    RegisterScriptCallback("actor_on_before_death", actor_on_before_death)
    RegisterScriptCallback("on_before_save_input",on_before_save_input)
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("actor_on_sleep", actor_on_sleep)
    RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("on_console_execute",on_console_execute)
	RegisterScriptCallback("physic_object_on_use_callback", physic_object_on_use_callback)
end

---------------------------------------------
-- Detours
---------------------------------------------

local detour_sleep = ui_sleep_dialog.sleep
local detour_sleep_bag = ui_sleep_dialog.sleep_bag

local function try_set_spawn()
    local now = game.get_game_time()

    if m_data.last_spawn_set_time then
        local tf = level.get_time_factor()
	    local diff_seconds = tonumber(now:diffSec(m_data.last_spawn_set_time)/tf)

        debug(tostring(diff_seconds))
        
        if diff_seconds > 60 then
            m_data.last_spawn_set_time = now
            set_spawn(true);
            return true    
        end 
    else
        m_data.last_spawn_set_time = now
        set_spawn(true);
        return true
    end
    return false
end

ui_sleep_dialog.sleep = function(force)
    if try_set_spawn() then
		disable_info("sleep_active")
        return
    end

    detour_sleep()
end

ui_sleep_dialog.sleep_bag = function(ph_sleepbag_id, sec)
    if try_set_spawn() then
		disable_info("sleep_active")
        return
    end

    detour_sleep_bag()
end
